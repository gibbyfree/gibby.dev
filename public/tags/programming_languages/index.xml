<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming_languages on Gibby Free</title>
    <link>/tags/programming_languages/</link>
    <description>Recent content in programming_languages on Gibby Free</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/programming_languages/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advent of Code &#39;21 ft. Nim</title>
      <link>/blog/aoc-2021/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/aoc-2021/</guid>
      <description>Overview I&amp;rsquo;ve always enjoyed participating in the Advent of Code, even if I never end up finishing the whole thing. The event comes at a bad time for me, where finals exams, co-op interviews, and holidays intersect in such a way that it&amp;rsquo;s impossible to commit to hours of extracurricular coding each week. However, I like to use AoC as an excuse to play around with a language that I wouldn&amp;rsquo;t otherwise put my hands on.</description>
      <content>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve always enjoyed participating in the &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, even if I never end up finishing the whole thing. The event comes at a bad time for me, where finals exams, co-op interviews, and holidays intersect in such a way that it&amp;rsquo;s impossible to commit to hours of extracurricular coding each week. However, I like to use AoC as an excuse to play around with a language that I wouldn&amp;rsquo;t otherwise put my hands on. This year, I chose to experiment with &lt;strong&gt;Nim&lt;/strong&gt;. I hadn&amp;rsquo;t heard of Nim until a friend mentioned it to me shortly prior to AoC. The tl;dr on Nim is that it&amp;rsquo;s statically typed and compiles to JavaScript and the C family. I have described it as being the illegitimate child of Python and TypeScript, which are two of my favorite languages to use. Here are some of the most enjoyable + quirky aspects of Nim that I uncovered as I worked through Advent of Code in 2021:&lt;/p&gt;
&lt;p&gt;(It&amp;rsquo;s unfortunate that my Hugo theme doesn&amp;rsquo;t support syntax highlighting for Nim&amp;hellip; Just imagine it in your mind ðŸ™‚!)&lt;/p&gt;
&lt;h3 id=&#34;day-1&#34;&gt;Day 1&lt;/h3&gt;
&lt;p&gt;I had no clue what I was doing with Nim when I started &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;Day 1&lt;/a&gt;. I was just using it as I&amp;rsquo;d use Python, and praying that nothing would blow up.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;nim result is cool!&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc findIncreases(nums: seq[int]): int =
    for i in 1 .. nums.len - 1:
        if nums[i] &amp;gt; nums[i - 1]:
            result &amp;#43;= 1
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I really liked the idea of this &lt;code&gt;result&lt;/code&gt; variable, which is a &lt;a href=&#34;https://nim-by-example.github.io/variables/result/&#34;&gt;shorthand for declaring and returning some kind of output variable&lt;/a&gt;. Nim automagically returns the value of &lt;code&gt;result&lt;/code&gt; once your &lt;code&gt;proc&lt;/code&gt; finishes executing. Coolio!&lt;/p&gt;
&lt;h3 id=&#34;day-2&#34;&gt;Day 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;&gt;Day 2&lt;/a&gt; was a more challenging problem, and required me to use some of the more complex features of Nim. As a statically typed language enjoyer, I started to dabble in Nim typing. I really liked their synatx for initializing typed variables. I also really liked &lt;a href=&#34;https://nim-lang.org/docs/tut1.html#advanced-types-tuples&#34;&gt;tuples&lt;/a&gt;:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;tuples and variables&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc getFinalPosition(commands: seq[tuple[direction: string, x:int]]): tuple[horizontal: int, depth: int] =
    var 
        hz: int
        depth: int
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I think that I used tuples appropriate for this method, but throughout AoC, I may have overused them. They&amp;rsquo;re a nifty data structure, but I tended to use tuples as a way of overcomplicating methods. This would lead to a devastating refactor if Part 2 of a problem conflicted with my initial division of labor in my procs.&lt;/p&gt;
&lt;h3 id=&#34;day-4&#34;&gt;Day 4&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;This&lt;/a&gt; is when things started to get bad, you guys. Day 4 is around the time when I began to feel frustrated with Nim &amp;ndash; or rather, my inability to conform my problem-solving to its limitations. I brute-forced the thing, but still wrote a few enjoyable one-liners.&lt;/p&gt;
&lt;p&gt;For instance: &lt;code&gt;strNums.keepItIf(it != &amp;quot;&amp;quot;) # remove blank lines&lt;/code&gt; Although I would become frustrated with the absence of certain &lt;a href=&#34;https://nim-lang.org/docs/sequtils.html&#34;&gt;utils&lt;/a&gt; in &lt;code&gt;sequtils&lt;/code&gt;, I really like &lt;code&gt;keepItIf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By Day 4, I also had developed a stubborn attachment for explicitly typing as much as I could. This works out pretty well until you start dealing with 3D arrays, i.e. an array of bingo boards. (To be fair, you would have this same issue with Java&amp;hellip; I think the concise nature of &lt;code&gt;seq&lt;/code&gt; just makes it harder to look at than &lt;code&gt;ArrayList&amp;lt;ArrayList&amp;lt;ArrayList&amp;gt;&amp;gt;&lt;/code&gt;) This is not enjoyable to write or maintain:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;seqs on the beach&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc boardLoop(commands: seq[int], boards: seq[seq[seq[int]]]): int =
    var currBoards: seq[seq[seq[int]]] = boards
    for s in commands:
        var checkedBoards: seq[seq[seq[int]]] = checkBoards(s, currBoards)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;If it weren&amp;rsquo;t for finals week, I would have been motivated to figure out this puzzle:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;2d seq transpose&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc transpose(s: seq[seq[int]]): seq[seq[int]] = # don&amp;#39;t care to figure out how to do this with map()
  result = newSeq[seq[int]](s[0].len)
  for i in 0 .. s[0].high:
    result[i] = newSeq[int](s.len)
    for j in 0 .. s.high:
      result[i][j] = s[j][i]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This is what I wrote to transpose a bingo board, or flip the board such that rows became columns and columns became rows. This problem isn&amp;rsquo;t even Nim-related, moreso related to my lack of experience in functional programming. If I were solving this in Python, I could&amp;rsquo;ve used something like numpy or even &lt;code&gt;zip()&lt;/code&gt; to transpose the 2D-array. With Nim, you gotta bake that from scratch!&lt;/p&gt;
&lt;h3 id=&#34;day-5&#34;&gt;Day 5&lt;/h3&gt;
&lt;p&gt;By &lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;Day 5&lt;/a&gt;, I had discovered &lt;a href=&#34;https://nim-lang.org/docs/manual.html#types-tuples-and-object-types&#34;&gt;object types in Nim&lt;/a&gt;, which was cool. But I was also starting to run into minor trouble:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;sequence of tuples&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc getInput(fileName: string): seq[tuple[startPos: Position, endPos: Position]] =
    var strPos: seq[string] = readFile(fileName).strip().splitLines()
    for str in strPos:
        var rawPos: seq[string] = str.split(&amp;#34;-&amp;gt;&amp;#34;)
        var posTuple: tuple[startPos: Position, endPos: Position]
        var posSeq: seq[Position] # this is stupid.
        for pos in rawPos:
            var cleanedPos: seq[int] = pos.strip().split(&amp;#34;,&amp;#34;).map(parseInt)
            posSeq.add(Position(x: cleanedPos[0], y: cleanedPos[1]))
        posTuple = (posSeq[0], posSeq[1])
        result.add(posTuple)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;In this method, I&amp;rsquo;m trying to read a file of &lt;code&gt;Position&lt;/code&gt; inputs formatted like: &lt;code&gt;0,9 -&amp;gt; 5,9&lt;/code&gt;. I want to parse each set of digit to a &lt;code&gt;Position&lt;/code&gt;, and then store both in a tuple. I was not able to find a way to populate a tuple one element at a time, which was understandable but frustrating for my use-case. I would have liked to just declare a &lt;code&gt;posTuple&lt;/code&gt;, and then &lt;code&gt;.add()&lt;/code&gt; up to 2 elements to it, just as I would do with a seq. Maybe I could have found a workaround by doing something like &lt;code&gt;posTuple = (posOne, null)&lt;/code&gt;, but then that would require me to keep track of whether I was on &lt;code&gt;posOne&lt;/code&gt; or &lt;code&gt;posTwo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another issue that I ran into during this problem was the matter of &lt;strong&gt;tuple iteration&lt;/strong&gt;. In Python, you can use a simple &lt;code&gt;for ... in&lt;/code&gt; to accomplish this task. I couldn&amp;rsquo;t get the naive solution working for tuple iteration (&lt;code&gt;for x in t.fields:&lt;/code&gt;), and I was intimidated by some of the complex &lt;a href=&#34;https://stackoverflow.com/a/69462862/11536569&#34;&gt;StackOverflow&lt;/a&gt; solutions that I found. I didn&amp;rsquo;t want to spend an hour figuring out how to iterate over a data structure, especially when a lot of the answers that I found online boiled down to &amp;ldquo;just use a different data structure&amp;rdquo;. So I did!&lt;/p&gt;
&lt;h3 id=&#34;day-6&#34;&gt;Day 6&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s something positive about Nim: &lt;a href=&#34;https://nim-lang.org/docs/tables.html#CountTable&#34;&gt;CountTables&lt;/a&gt; are dope! Helpful data structures like these make me wish that Nim were an accepted language on Leetcode ðŸ˜†. &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;Day 6&lt;/a&gt; was a breath of fresh air after the last 2 tricky problems, and I liked &lt;code&gt;CountTable&lt;/code&gt;. This was also the first time that I timed my solution in Nim, which I understood to be breathtakingly fast. Using the &amp;lsquo;counter implementation&amp;rsquo; for this particular problem, part 1 and 2 of my code executed in &lt;code&gt;0.002&lt;/code&gt; seconds.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;counttable&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
var newCounts: CountTable[int]
for k in countdown(8, 0):
    var fishHere: int = currFish[k]
    if k == 0: # flip to 6, create new fish
        newCounts.inc(6, fishHere)
        newCounts.inc(8, fishHere)
    else: # standard case, i think
        newCounts.inc(k - 1, fishHere)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h3 id=&#34;day-9&#34;&gt;Day 9&lt;/h3&gt;
&lt;p&gt;This was the day that broke me. I had been able to cope with 8 days of yearning for non-&lt;code&gt;seq&lt;/code&gt; data structures, but &lt;a href=&#34;https://adventofcode.com/2021/day/9&#34;&gt;Day 9&lt;/a&gt; broke me. I recognized that this was a flood fill problem, and initially I felt like Nim and I were up for the task. Things got out of hand quickly. Remember what I said before about misusing tuples? Yeah:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;6&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;6&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;uhhhh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;â–³&#34; data-label-collapse=&#34;â–½&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc findBasinSize(heightmap: seq[seq[int]], low: tuple[x: int, y: int], visited: Table[tuple[x: int, y: int], bool], size: int): 
        tuple[basinSize: int, visited: Table[tuple[x: int, y: int], bool]] =
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I did not enjoy that very much. Still, for Part 1 I was able to get a working, hack-y solution for finding adjacent elements in a 2D-array and finding the low points of a 2D-array as I traversed it. The killing blow came in Part 2, where it became apparent that I would need to use some kind of BFS/DFS approach to find the largest basins in my puzzle input. The problem? Nim doesn&amp;rsquo;t have anything like a stack or queue, so I&amp;rsquo;d have to implement that data structure from scratch. (Not impossible, but probably not simple either.) Furthermore, I felt punished by any attempts at implementing a recursive solution. I encountered a bunch of weird nuance, and decided that I would just forfeit on Part 2 and get back in the game tomorrow. As I told my friends, &lt;code&gt;nim recursion making me angy + i don&#39;t care to implement stack in a new language from scratch at this time&lt;/code&gt;. So true!&lt;/p&gt;
&lt;h3 id=&#34;day-10&#34;&gt;Day 10&lt;/h3&gt;
&lt;p&gt;But I was wrong ðŸ™ƒ. I immediately recognized that &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;Day 10&lt;/a&gt; of AoC was a twist on a paren-matching problem, which I have &lt;a href=&#34;https://github.com/gibbyfree/leetcode/blob/master/easy/valid_parentheses.py&#34;&gt;no problem solving&lt;/a&gt; in the typical language. I recognized that, if I had just went about creating my own Stack implementation in Nim, I probably would&amp;rsquo;ve saved myself a lot of trouble throughout AoC. I was immersed in &lt;a href=&#34;https://en.wikipedia.org/wiki/Sunk_cost&#34;&gt;Sunk Cost Fallacy&lt;/a&gt; at this point as I realized that my peers using Python would be spending 1/2 the time on AoC that I spent each day. It was tempting to just switch languages to continue working through AoC problems, but what&amp;rsquo;s the fun in that! So I just gave up.&lt;/p&gt;
&lt;h2 id=&#34;retrospective&#34;&gt;Retrospective&lt;/h2&gt;
&lt;p&gt;Despite my angst, this was one of the most fun Advent of Codes that I&amp;rsquo;ve ever participated in! I got much further than I expected, and I learned a good deal about a cool new language. My key Nim takeaways were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s fun to write in a concise, statically-typed language. Probably my favorite language archetype out there.&lt;/li&gt;
&lt;li&gt;Nim is blazing fast. This is something that you definitely don&amp;rsquo;t get when you work in Java or Python for these types of problems. It was satisfying to compile and run new code in the blink of an eye, especially when I was going through trial-and-error of various solutions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nim-lang.org/docs/manual.html&#34;&gt;The Nim docs&lt;/a&gt; are excellent. Yes, there&amp;rsquo;s some room for improvement. I think there are certain portions that could be described or organized better. But I lived in this documentation while I worked through AoC, and I didn&amp;rsquo;t hate it that badly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forum.nim-lang.org/&#34;&gt;The Nim community&lt;/a&gt; is incredible. It&amp;rsquo;s made up of some super supportive people who are dedicated to empowering and promoting a cool, cutting-edge language. Their StackOverflow answers and forum threads were invaluable to me as I was learning the ropes of Nim.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To check out my GitHub repo for Advent of Code 2021, click &lt;a href=&#34;https://github.com/gibbyfree/aoc-2021&#34;&gt;the link here&lt;/a&gt;!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
