<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gibby Free</title>
    <link>/</link>
    <description>Recent content on Gibby Free</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Engineering at Microsoft</title>
      <link>/experience/microsoft/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/experience/microsoft/</guid>
      <description>It&amp;rsquo;s an honor and a privilege to be able to work at a company with such a rich history in the world of computing. I have only been with Microsoft for a short time, so I&amp;rsquo;m at pains to introduce a friend I&amp;rsquo;ve barely met 🙂 Currently, I live within Engineering Systems at Microsoft. My day-to-day work strives to improve the developer experience at Microsoft, which in turn improves the quality of what is ultimately delivered to Microsoft&amp;rsquo;s gargantuan customer base.</description>
      <content>&lt;p&gt;It&amp;rsquo;s an honor and a privilege to be able to work at a company with such a rich history in the world of computing. I have only been with Microsoft for a short time, so I&amp;rsquo;m at pains to introduce a friend I&amp;rsquo;ve barely met 🙂 Currently, I live within Engineering Systems at Microsoft. My day-to-day work strives to improve the developer experience at Microsoft, which in turn improves the quality of what is ultimately delivered to Microsoft&amp;rsquo;s gargantuan customer base. I&amp;rsquo;m driven to learn all that I can from my brilliant teammates, and from the general aura of brilliance that can be found in Microsoft&amp;rsquo;s engineering organization.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Software Engineering at Reprise</title>
      <link>/experience/reprise/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/experience/reprise/</guid>
      <description>Reprise is a product-led growth platform that specializes in the creation of demos and product tours. Using Reprise&amp;rsquo;s browser extension, a user is able to capture their website or web application. This capture is parsed by the extension, and the user can use Reprise&amp;rsquo;s editor to directly modify the behavior and appearance of their demo. This no-code editor enables always-on, infrastructure-less views into the user&amp;rsquo;s application or webpage, allowing companies to create demos for their products without having to go through the trouble of configuring, enabling, and maintaining a fickle demo environment.</description>
      <content>&lt;p&gt;Reprise is a product-led growth platform that specializes in the creation of demos and product tours. Using Reprise&amp;rsquo;s browser extension, a user is able to capture their website or web application. This capture is parsed by the extension, and the user can use Reprise&amp;rsquo;s editor to directly modify the behavior and appearance of their demo. This no-code editor enables always-on, infrastructure-less views into the user&amp;rsquo;s application or webpage, allowing companies to create demos for their products without having to go through the trouble of configuring, enabling, and maintaining a fickle demo environment. Here&amp;rsquo;s what I have on my resume to represent my time at Reprise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implemented full-stack features in Reprise’s no-code editing platform and browser
extension using TypeScript, Vue.js, and Django&lt;/li&gt;
&lt;li&gt;Investigated experimental approaches to improve reliability and performance of a tool that
clones modern web applications and intercepts web requests to mock backend services&lt;/li&gt;
&lt;li&gt;Supported efforts to integrate analytics pipelines with external services&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Reprise is the smallest and most dynamic company that I&amp;rsquo;ve ever worked at. Broadly speaking, my work at Reprise involved improving the usability, performance, and functionality of our products. This includes Reprise&amp;rsquo;s Screen Capture offering, as well as their experimental Live Demo product, which allows users to capture sandboxed versions of complex web applications. I also spent time on the Chromium extension team, as well as the analytics team. It was an awesome and unique experience to work across the entire product&amp;rsquo;s platform during my time at the company.&lt;/p&gt;
&lt;p&gt;I enjoyed the unique problems (and innovative solutions) that I&amp;rsquo;ve been exposed to while working at Reprise. The tech stack consists of a Vue.js / TypeScript frontend, and a Django backend. I&amp;rsquo;ve loved working with these technologies on my own personal time, and it was wonderful to be able to work with them professionally. In addition, this was my first role where I&amp;rsquo;ve had so much hands-on work with browser extensions. The use of the extension, along with the cutting-edge nature of our browser-based no-code editor, has led me to learn a lot about the inner workings of web browsers. I was challenged by the nuances of this kind of &amp;ldquo;low-level&amp;rdquo; web development, especially as I worked through highly ambiguous tasks and played around with experimental approaches to improve the reliability of Reprise&amp;rsquo;s product offering.&lt;/p&gt;
&lt;p&gt;My time at Reprise was a whirlwind of learning and implementation, and I feel like I grew a lot from a role where individual contributors could leave such a lasting impact on the application. In addition, I found that flexibility and agility were important qualities to have if one wishes to thrive in an early-stage startup. It was a great opportunity to be able to improve on those competencies at this position.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Software Engineering at Cogito</title>
      <link>/experience/cogito/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/experience/cogito/</guid>
      <description>Cogito is a software company that develops an AI-augmented coaching system that integrates directly with a call center&amp;rsquo;s telephony system. When Cogito&amp;rsquo;s Dialog web application is running on a call center agent&amp;rsquo;s machine, they will receive real-time feedback related to their behavior in the call. Dialog will notify the agent in real-time when they are speaking too quickly, when there has been an extended pause in the conversation, when there is an opportunity to meet their customer with empathy, and upon many other unique triggers.</description>
      <content>&lt;p&gt;Cogito is a software company that develops an AI-augmented coaching system that integrates directly with a call center&amp;rsquo;s telephony system. When Cogito&amp;rsquo;s Dialog web application is running on a call center agent&amp;rsquo;s machine, they will receive real-time feedback related to their behavior in the call. Dialog will notify the agent in real-time when they are speaking too quickly, when there has been an extended pause in the conversation, when there is an opportunity to meet their customer with empathy, and upon many other unique triggers. Here&amp;rsquo;s what I have on my resume to represent my time at Cogito:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developed and maintained RESTful, asynchronous APIs using Java Spring Boot&lt;/li&gt;
&lt;li&gt;Addressed bugs and technical debt associated with the launch of Platform 2, an overhauled, microservice-based platform supporting core functionality of the product&lt;/li&gt;
&lt;li&gt;Supported infrastructural monitoring and maintenance for scalability and performance&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;As part of the Platform team at Cogito, I helped my fellow engineers develop Platform 2. Platform 2 was a ground-up reimplementation of Dialog&amp;rsquo;s first set of platform services, and it was reimagined to be more performant, reliable, and extensible than Platform 1. All of the microservices were developed using Java Spring Boot and deployed via Kubernetes. During the pre-GA stage of Platform 2&amp;rsquo;s release, I tracked down and squashed several bugs that interfered with the usability of the new microservices. I laid down the framework for extensions on the various APIs, and I also improved test coverage to ensure reliability of the overall system.&lt;/p&gt;
&lt;p&gt;The coolest part of my time at Cogito was the exposure that I gained to various infrastructure-related tools &amp;ndash; after all, the Platform team tends to wear many hats! I exposed relevant metrics in our microservices via Prometheus, and I used these endpoints to build out dashboards in Grafana. These dashboards were used to monitor Platform 2&amp;rsquo;s general performance and availability, but they were also used to measure the system&amp;rsquo;s overall reliability during webload testing. In addition, there were some points where it became necessary to develop new utility-based microservices to be used by Platform 2 or its users. I used Terraform to create AWS resources for these microservices, as well as the roles necessary for our Kubernetes pods to actually use the resources.&lt;/p&gt;
&lt;p&gt;Overall, it was one of the most technically fascinating and rewarding co-ops that I experienced during my time at Northeastern University. By the end of my co-op, I was able to see the first Cogito customer deploy to a Platform 2 environment. Considering that Platform 2 had been conceptualized long before I even interviewed at Cogito, it was truly awesome to have a hand in the culmination of the engineering organization&amp;rsquo;s hard work and dedication.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Advent of Code &#39;21 ft. Nim</title>
      <link>/blog/aoc-2021/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/aoc-2021/</guid>
      <description>Overview I&amp;rsquo;ve always enjoyed participating in the Advent of Code, even if I never end up finishing the whole thing. The event comes at a bad time for me, where finals exams, co-op interviews, and holidays intersect in such a way that it&amp;rsquo;s impossible to commit to hours of extracurricular coding each week. However, I like to use AoC as an excuse to play around with a language that I wouldn&amp;rsquo;t otherwise put my hands on.</description>
      <content>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve always enjoyed participating in the &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, even if I never end up finishing the whole thing. The event comes at a bad time for me, where finals exams, co-op interviews, and holidays intersect in such a way that it&amp;rsquo;s impossible to commit to hours of extracurricular coding each week. However, I like to use AoC as an excuse to play around with a language that I wouldn&amp;rsquo;t otherwise put my hands on. This year, I chose to experiment with &lt;strong&gt;Nim&lt;/strong&gt;. I hadn&amp;rsquo;t heard of Nim until a friend mentioned it to me shortly prior to AoC. The tl;dr on Nim is that it&amp;rsquo;s statically typed and compiles to JavaScript and the C family. I have described it as being the illegitimate child of Python and TypeScript, which are two of my favorite languages to use. Here are some of the most enjoyable + quirky aspects of Nim that I uncovered as I worked through Advent of Code in 2021:&lt;/p&gt;
&lt;p&gt;(It&amp;rsquo;s unfortunate that my Hugo theme doesn&amp;rsquo;t support syntax highlighting for Nim&amp;hellip; Just imagine it in your mind 🙂!)&lt;/p&gt;
&lt;h3 id=&#34;day-1&#34;&gt;Day 1&lt;/h3&gt;
&lt;p&gt;I had no clue what I was doing with Nim when I started &lt;a href=&#34;https://adventofcode.com/2021/day/1&#34;&gt;Day 1&lt;/a&gt;. I was just using it as I&amp;rsquo;d use Python, and praying that nothing would blow up.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;nim result is cool!&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc findIncreases(nums: seq[int]): int =
    for i in 1 .. nums.len - 1:
        if nums[i] &amp;gt; nums[i - 1]:
            result &amp;#43;= 1
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I really liked the idea of this &lt;code&gt;result&lt;/code&gt; variable, which is a &lt;a href=&#34;https://nim-by-example.github.io/variables/result/&#34;&gt;shorthand for declaring and returning some kind of output variable&lt;/a&gt;. Nim automagically returns the value of &lt;code&gt;result&lt;/code&gt; once your &lt;code&gt;proc&lt;/code&gt; finishes executing. Coolio!&lt;/p&gt;
&lt;h3 id=&#34;day-2&#34;&gt;Day 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/2&#34;&gt;Day 2&lt;/a&gt; was a more challenging problem, and required me to use some of the more complex features of Nim. As a statically typed language enjoyer, I started to dabble in Nim typing. I really liked their synatx for initializing typed variables. I also really liked &lt;a href=&#34;https://nim-lang.org/docs/tut1.html#advanced-types-tuples&#34;&gt;tuples&lt;/a&gt;:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;tuples and variables&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc getFinalPosition(commands: seq[tuple[direction: string, x:int]]): tuple[horizontal: int, depth: int] =
    var 
        hz: int
        depth: int
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I think that I used tuples appropriate for this method, but throughout AoC, I may have overused them. They&amp;rsquo;re a nifty data structure, but I tended to use tuples as a way of overcomplicating methods. This would lead to a devastating refactor if Part 2 of a problem conflicted with my initial division of labor in my procs.&lt;/p&gt;
&lt;h3 id=&#34;day-4&#34;&gt;Day 4&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2021/day/4&#34;&gt;This&lt;/a&gt; is when things started to get bad, you guys. Day 4 is around the time when I began to feel frustrated with Nim &amp;ndash; or rather, my inability to conform my problem-solving to its limitations. I brute-forced the thing, but still wrote a few enjoyable one-liners.&lt;/p&gt;
&lt;p&gt;For instance: &lt;code&gt;strNums.keepItIf(it != &amp;quot;&amp;quot;) # remove blank lines&lt;/code&gt; Although I would become frustrated with the absence of certain &lt;a href=&#34;https://nim-lang.org/docs/sequtils.html&#34;&gt;utils&lt;/a&gt; in &lt;code&gt;sequtils&lt;/code&gt;, I really like &lt;code&gt;keepItIf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By Day 4, I also had developed a stubborn attachment for explicitly typing as much as I could. This works out pretty well until you start dealing with 3D arrays, i.e. an array of bingo boards. (To be fair, you would have this same issue with Java&amp;hellip; I think the concise nature of &lt;code&gt;seq&lt;/code&gt; just makes it harder to look at than &lt;code&gt;ArrayList&amp;lt;ArrayList&amp;lt;ArrayList&amp;gt;&amp;gt;&lt;/code&gt;) This is not enjoyable to write or maintain:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;seqs on the beach&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc boardLoop(commands: seq[int], boards: seq[seq[seq[int]]]): int =
    var currBoards: seq[seq[seq[int]]] = boards
    for s in commands:
        var checkedBoards: seq[seq[seq[int]]] = checkBoards(s, currBoards)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;If it weren&amp;rsquo;t for finals week, I would have been motivated to figure out this puzzle:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;2d seq transpose&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc transpose(s: seq[seq[int]]): seq[seq[int]] = # don&amp;#39;t care to figure out how to do this with map()
  result = newSeq[seq[int]](s[0].len)
  for i in 0 .. s[0].high:
    result[i] = newSeq[int](s.len)
    for j in 0 .. s.high:
      result[i][j] = s[j][i]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;This is what I wrote to transpose a bingo board, or flip the board such that rows became columns and columns became rows. This problem isn&amp;rsquo;t even Nim-related, moreso related to my lack of experience in functional programming. If I were solving this in Python, I could&amp;rsquo;ve used something like numpy or even &lt;code&gt;zip()&lt;/code&gt; to transpose the 2D-array. With Nim, you gotta bake that from scratch!&lt;/p&gt;
&lt;h3 id=&#34;day-5&#34;&gt;Day 5&lt;/h3&gt;
&lt;p&gt;By &lt;a href=&#34;https://adventofcode.com/2021/day/5&#34;&gt;Day 5&lt;/a&gt;, I had discovered &lt;a href=&#34;https://nim-lang.org/docs/manual.html#types-tuples-and-object-types&#34;&gt;object types in Nim&lt;/a&gt;, which was cool. But I was also starting to run into minor trouble:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;sequence of tuples&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc getInput(fileName: string): seq[tuple[startPos: Position, endPos: Position]] =
    var strPos: seq[string] = readFile(fileName).strip().splitLines()
    for str in strPos:
        var rawPos: seq[string] = str.split(&amp;#34;-&amp;gt;&amp;#34;)
        var posTuple: tuple[startPos: Position, endPos: Position]
        var posSeq: seq[Position] # this is stupid.
        for pos in rawPos:
            var cleanedPos: seq[int] = pos.strip().split(&amp;#34;,&amp;#34;).map(parseInt)
            posSeq.add(Position(x: cleanedPos[0], y: cleanedPos[1]))
        posTuple = (posSeq[0], posSeq[1])
        result.add(posTuple)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;In this method, I&amp;rsquo;m trying to read a file of &lt;code&gt;Position&lt;/code&gt; inputs formatted like: &lt;code&gt;0,9 -&amp;gt; 5,9&lt;/code&gt;. I want to parse each set of digit to a &lt;code&gt;Position&lt;/code&gt;, and then store both in a tuple. I was not able to find a way to populate a tuple one element at a time, which was understandable but frustrating for my use-case. I would have liked to just declare a &lt;code&gt;posTuple&lt;/code&gt;, and then &lt;code&gt;.add()&lt;/code&gt; up to 2 elements to it, just as I would do with a seq. Maybe I could have found a workaround by doing something like &lt;code&gt;posTuple = (posOne, null)&lt;/code&gt;, but then that would require me to keep track of whether I was on &lt;code&gt;posOne&lt;/code&gt; or &lt;code&gt;posTwo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another issue that I ran into during this problem was the matter of &lt;strong&gt;tuple iteration&lt;/strong&gt;. In Python, you can use a simple &lt;code&gt;for ... in&lt;/code&gt; to accomplish this task. I couldn&amp;rsquo;t get the naive solution working for tuple iteration (&lt;code&gt;for x in t.fields:&lt;/code&gt;), and I was intimidated by some of the complex &lt;a href=&#34;https://stackoverflow.com/a/69462862/11536569&#34;&gt;StackOverflow&lt;/a&gt; solutions that I found. I didn&amp;rsquo;t want to spend an hour figuring out how to iterate over a data structure, especially when a lot of the answers that I found online boiled down to &amp;ldquo;just use a different data structure&amp;rdquo;. So I did!&lt;/p&gt;
&lt;h3 id=&#34;day-6&#34;&gt;Day 6&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s something positive about Nim: &lt;a href=&#34;https://nim-lang.org/docs/tables.html#CountTable&#34;&gt;CountTables&lt;/a&gt; are dope! Helpful data structures like these make me wish that Nim were an accepted language on Leetcode 😆. &lt;a href=&#34;https://adventofcode.com/2021/day/6&#34;&gt;Day 6&lt;/a&gt; was a breath of fresh air after the last 2 tricky problems, and I liked &lt;code&gt;CountTable&lt;/code&gt;. This was also the first time that I timed my solution in Nim, which I understood to be breathtakingly fast. Using the &amp;lsquo;counter implementation&amp;rsquo; for this particular problem, part 1 and 2 of my code executed in &lt;code&gt;0.002&lt;/code&gt; seconds.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;counttable&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
var newCounts: CountTable[int]
for k in countdown(8, 0):
    var fishHere: int = currFish[k]
    if k == 0: # flip to 6, create new fish
        newCounts.inc(6, fishHere)
        newCounts.inc(8, fishHere)
    else: # standard case, i think
        newCounts.inc(k - 1, fishHere)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h3 id=&#34;day-9&#34;&gt;Day 9&lt;/h3&gt;
&lt;p&gt;This was the day that broke me. I had been able to cope with 8 days of yearning for non-&lt;code&gt;seq&lt;/code&gt; data structures, but &lt;a href=&#34;https://adventofcode.com/2021/day/9&#34;&gt;Day 9&lt;/a&gt; broke me. I recognized that this was a flood fill problem, and initially I felt like Nim and I were up for the task. Things got out of hand quickly. Remember what I said before about misusing tuples? Yeah:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;6&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;6&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;nim&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;uhhhh&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-nim&#34; &gt;&lt;code&gt;
proc findBasinSize(heightmap: seq[seq[int]], low: tuple[x: int, y: int], visited: Table[tuple[x: int, y: int], bool], size: int): 
        tuple[basinSize: int, visited: Table[tuple[x: int, y: int], bool]] =
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;I did not enjoy that very much. Still, for Part 1 I was able to get a working, hack-y solution for finding adjacent elements in a 2D-array and finding the low points of a 2D-array as I traversed it. The killing blow came in Part 2, where it became apparent that I would need to use some kind of BFS/DFS approach to find the largest basins in my puzzle input. The problem? Nim doesn&amp;rsquo;t have anything like a stack or queue, so I&amp;rsquo;d have to implement that data structure from scratch. (Not impossible, but probably not simple either.) Furthermore, I felt punished by any attempts at implementing a recursive solution. I encountered a bunch of weird nuance, and decided that I would just forfeit on Part 2 and get back in the game tomorrow. As I told my friends, &lt;code&gt;nim recursion making me angy + i don&#39;t care to implement stack in a new language from scratch at this time&lt;/code&gt;. So true!&lt;/p&gt;
&lt;h3 id=&#34;day-10&#34;&gt;Day 10&lt;/h3&gt;
&lt;p&gt;But I was wrong 🙃. I immediately recognized that &lt;a href=&#34;https://adventofcode.com/2021/day/10&#34;&gt;Day 10&lt;/a&gt; of AoC was a twist on a paren-matching problem, which I have &lt;a href=&#34;https://github.com/gibbyfree/leetcode/blob/master/easy/valid_parentheses.py&#34;&gt;no problem solving&lt;/a&gt; in the typical language. I recognized that, if I had just went about creating my own Stack implementation in Nim, I probably would&amp;rsquo;ve saved myself a lot of trouble throughout AoC. I was immersed in &lt;a href=&#34;https://en.wikipedia.org/wiki/Sunk_cost&#34;&gt;Sunk Cost Fallacy&lt;/a&gt; at this point as I realized that my peers using Python would be spending 1/2 the time on AoC that I spent each day. It was tempting to just switch languages to continue working through AoC problems, but what&amp;rsquo;s the fun in that! So I just gave up.&lt;/p&gt;
&lt;h2 id=&#34;retrospective&#34;&gt;Retrospective&lt;/h2&gt;
&lt;p&gt;Despite my angst, this was one of the most fun Advent of Codes that I&amp;rsquo;ve ever participated in! I got much further than I expected, and I learned a good deal about a cool new language. My key Nim takeaways were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s fun to write in a concise, statically-typed language. Probably my favorite language archetype out there.&lt;/li&gt;
&lt;li&gt;Nim is blazing fast. This is something that you definitely don&amp;rsquo;t get when you work in Java or Python for these types of problems. It was satisfying to compile and run new code in the blink of an eye, especially when I was going through trial-and-error of various solutions.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nim-lang.org/docs/manual.html&#34;&gt;The Nim docs&lt;/a&gt; are excellent. Yes, there&amp;rsquo;s some room for improvement. I think there are certain portions that could be described or organized better. But I lived in this documentation while I worked through AoC, and I didn&amp;rsquo;t hate it that badly.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forum.nim-lang.org/&#34;&gt;The Nim community&lt;/a&gt; is incredible. It&amp;rsquo;s made up of some super supportive people who are dedicated to empowering and promoting a cool, cutting-edge language. Their StackOverflow answers and forum threads were invaluable to me as I was learning the ropes of Nim.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To check out my GitHub repo for Advent of Code 2021, click &lt;a href=&#34;https://github.com/gibbyfree/aoc-2021&#34;&gt;the link here&lt;/a&gt;!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Simulating Ciphers: Enigma I CLI</title>
      <link>/projects/enigma/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/projects/enigma/</guid>
      <description>Context In late 2020, I stumbled upon a The Code Book written by Simon Singh. I was intrigued by the book&amp;rsquo;s discussion of cryptographic history, especially its coverage of the earliest forms of cryptography. The Code Book spends a fair bit of time talking about the Enigma Machine, which was a legendary cipher machine used by the Axis powers during World War II. I was aware of the Enigma Machine before reading The Code Book, but I didn&amp;rsquo;t really understand the details as to how it worked.</description>
      <content>&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;In late 2020, I stumbled upon a &lt;a href=&#34;https://simonsingh.net/books/the-code-book/&#34;&gt;&lt;em&gt;The Code Book&lt;/em&gt; written by Simon Singh&lt;/a&gt;. I was intrigued by the book&amp;rsquo;s discussion of cryptographic history, especially its coverage of the earliest forms of cryptography. &lt;em&gt;The Code Book&lt;/em&gt; spends a fair bit of time talking about the &lt;a href=&#34;https://en.wikipedia.org/wiki/Enigma_machine&#34;&gt;&lt;strong&gt;Enigma Machine&lt;/strong&gt;&lt;/a&gt;, which was a legendary cipher machine used by the Axis powers during World War II. I was aware of the Enigma Machine before reading &lt;em&gt;The Code Book&lt;/em&gt;, but I didn&amp;rsquo;t really understand the details as to how it worked. As it turns out, its mechanisms weren&amp;rsquo;t that hard to wrap my head around. I was fixated on the creativity that went into the machine&amp;rsquo;s design, and how just a few simple components could come together to produce a nearly-unbreakable cipher. (Also, &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma#Polish_breakthroughs&#34;&gt;the brilliant work of the Polish&lt;/a&gt; to crack the cipher was mind-blowing.) I wasn&amp;rsquo;t born as an engineer with any mechanical prowess, and so I felt inspired to create a CLI-based version of the Engima I machine.&lt;/p&gt;
&lt;p&gt;When choosing the tech stack for this project, I opted to use Java. Mostly because, at the time, I was completing a &lt;a href=&#34;/experience/cogito&#34;&gt;software engineering co-op at Cogito&lt;/a&gt;, and so my day-to-day usage of Java had me confident that I would be able to crank out this project before I lost interest in it. Furthermore, I really wanted to represent the internals of the machine in an &lt;strong&gt;object-oriented&lt;/strong&gt; way. I appreciated the modular nature of the Enigma machine, and how each component has a simple individual function, but the coalescence of their functionalities came together to form something much more complex than the sum of its parts. With my language chosen, I was able to begin the design and implementation of this simulation.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;To design the simulation, it&amp;rsquo;s important to understand how the original machine operated. There are two core components: the plugboard, and the rotors. The &amp;lsquo;magic&amp;rsquo; of the Engima machine is that the encryption process doubles over onto itself. That is to say, everything is encrypted one way (in through the plugboard, then through the rotors) and then it&amp;rsquo;s encrypted the same way, but backwards (through the rotors, then out through the plugboard). The individual specifications of these two components are fairly straight-forward.&lt;/p&gt;
&lt;p&gt;The encryption process flows by inputting individual characters through the machine&amp;rsquo;s keyboard. Electric current flows from each individual keypress up through the plugboard.&lt;/p&gt;
&lt;h3 id=&#34;plugboard&#34;&gt;Plugboard&lt;/h3&gt;

  &lt;figure class=&#34;right&#34;  &gt;
    &lt;img src=&#34;/projects/enigma/plugboard.jpeg&#34;  alt=&#34;Enigma plugboard&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;left&#34;  style=&#34;color: black;&#34; &gt;The Enigma&#39;s plugboard. Each character connects to one other character.&lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;p&gt;The plugboard is a straight-forward but ingenuous enchipering component. Characters can be connected to each other with a wire, and this wire establishes a &lt;strong&gt;substitution cipher&lt;/strong&gt; between the two characters. If a user connects the &lt;code&gt;[A, B]&lt;/code&gt; pair, an input of &lt;code&gt;A&lt;/code&gt; will become &lt;code&gt;B&lt;/code&gt; as the current exits the plugboard. There&amp;rsquo;s nothing especially mind-blowing about how this would work algorithmically. My implementation of the plugboard started by importing an &lt;code&gt;ALPHABET&lt;/code&gt; constant, which is a simple ordered list containing the letters of the alphabet. I take the swapped characters from the input file (more on that later) and take note of them as swapped pairs. On each keypress, if a character belongs to a swap pair, we perform this simple substitution:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;plugboard swapping&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
char before = ALPHABET.get(i);
char after = ALPHABET.get(outs.get(ins.indexOf(i)));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;When the electric current is passing through the plugboard for a second time (right before the enciphered character is returned by the machine), we just perform the inverse of this operation:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;plugboard swapping 2: electric boogaloo&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
char before = ALPHABET.get(i);
char after = ALPHABET.get(ins.get(outs.indexOf(i)));
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h3 id=&#34;rotor&#34;&gt;Rotor&lt;/h3&gt;

  &lt;figure class=&#34;left&#34;  &gt;
    &lt;img src=&#34;/projects/enigma/rotor.jpeg&#34;  alt=&#34;Enigma rotor&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;left&#34;  style=&#34;color: black;&#34; &gt;An Enigma rotor. Notice the indexed alphabet wheel, which houses its internal structure and wiring.&lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;p&gt;The rotor is the bread-and-butter of the Enigma, and it was the main draw of the machine for me. The rotors add a &lt;strong&gt;shift cipher&lt;/strong&gt; layer to the enciphering flow, and they do so in a unique way. The rotors themselves are hardwired to a certain configuration, where one character will always become another character. For instance, the historic Enigma I&amp;rsquo;s rotor I used the wire configuration &lt;code&gt;EKMFLGDQVZNTOWYHXUSPAIBRCJ&lt;/code&gt;. The pin corresponding to &lt;code&gt;ALPHABET[0]&lt;/code&gt;, or &lt;code&gt;A&lt;/code&gt;, would be wired to become &lt;code&gt;E&lt;/code&gt;. There were three rotors in the Enigma I, and so as a character&amp;rsquo;s electric signal exits the plugboard, it is enciphered by the three rotors in rapid succession. The complexity of the rotor configuration comes in the fact that a) the rotors can be oriented in any initial position and b) the rotors &amp;lsquo;step&amp;rsquo; on each keypress.&lt;/p&gt;
&lt;p&gt;What does this mean exactly? When I described the earlier case of &lt;code&gt;A -&amp;gt; E&lt;/code&gt; from rotor I, this would only occur if the rotor were intially placed in a position of &lt;code&gt;0&lt;/code&gt;. There&amp;rsquo;s a reason why the alphabet of the rotor is represented by alphabetic indices rather than alphabetic characters. The &lt;strong&gt;offset&lt;/strong&gt; of the rotor lends additional complexity to the cipher. If I set a rotor of wire configuration &lt;code&gt;EKMFLGDQVZNTOWYHXUSPAIBRCJ&lt;/code&gt; to the offset of &lt;code&gt;1&lt;/code&gt;, then suddenly I have &lt;code&gt;KMFLGDQVZNTOWYHXUSPAIBRCJE&lt;/code&gt;. The pin corresponding to &lt;code&gt;A&lt;/code&gt; would be wired to become &lt;code&gt;K&lt;/code&gt;. Not only can the offset of a rotor be manually set prior to enciphering, but on each keypress, the rotors will &amp;lsquo;step&amp;rsquo;, or rotate themselves along their wire configuration. So, after &lt;code&gt;A -&amp;gt; K&lt;/code&gt;, the rotor will step, and the wire configuration can be represented as &lt;code&gt;MFLGDQVZNTOWYHXUSPAIBRCJEK&lt;/code&gt;. If another &lt;code&gt;A&lt;/code&gt; input entered rotor I, it would be enciphered in a configuration that was entirely unique from the previous &lt;code&gt;A&lt;/code&gt; input.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
  &lt;figure class=&#34;right&#34;  &gt;
    &lt;img src=&#34;/projects/enigma/decoder-pin.png&#34;  alt=&#34;Decoder pin&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;left&#34;  style=&#34;color: black;&#34; &gt;I wonder how many crummy commercials were enciphered by the Enigma I...?&lt;/figcaption&gt;
    
  &lt;/figure&gt;

 &lt;strong&gt;Tangent:&lt;/strong&gt; When you consider that your three hardwired rotors can be set in any order (maybe I place rotor I last, and rotor II first) and that their initial offset can be anywhere from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;26&lt;/code&gt;, these layers of subtle variation produced enciphered text that was (nearly) impossible to crack without a key. &lt;a href=&#34;https://en.wikipedia.org/wiki/Rotor_machine&#34;&gt;Rotor machines&lt;/a&gt; had existed in cryptography prior to zenith of the Enigma I, but it could be argued that the Engima perfected the cryptographic techniques used by the typical rotor machine. For me, upon first reading about how these rotors shifted along their wire configuration, I could only think of one thing: the Little Orphan Annie Secret Decoder Pin from &lt;em&gt;A Christmas Story&lt;/em&gt;. I mentally conceptualized the Enigma as three of those decoder pins stacked on top of each other, feeding each other&amp;rsquo;s input and output. It made the project a lot more fun to think about!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When we think about translating this rotor functionality to code, we&amp;rsquo;re benefitted by the fact that these are hardwired configurations. Basically, we just have to keep track of the offset of the wheel and make sure that we&amp;rsquo;re &amp;lsquo;wrapping around&amp;rsquo; the wire configuration as we shift it along itself. I wrote something like this:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;rotor translating&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
int newIndex = i &amp;#43; this.offset;
while (newIndex &amp;gt; 25) {
    newIndex -= 25;
}
char before = ALPHABET.get(i);
char after;
if (this.offset &amp;gt; 0) {
    after = this.wireSpec.get(newIndex - 1);
} else {
    after = this.wireSpec.get(i);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Stepping the rotor&amp;rsquo;s offset is accomplished in a similarly trivial way:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;rotor offset&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
if (offset &amp;gt;= 25) {
    offset = 0;
}
else {
    this.offset&amp;#43;&amp;#43;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;There is some nuance in how the rotor stepping is handled, though. The rotor steps &lt;strong&gt;on initial input&lt;/strong&gt;, so when the first key is pressed, by the time the electrical signal reaches the rotor, it will have already shifted from its initial offset. In addition, we step the rightmost rotor on each keypress, but we only step the middle and leftmost rotors when the alphabet indice for &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, or &lt;code&gt;W&lt;/code&gt; (depending on which rotor is in the middle and left position &amp;ndash; remember the wire configurations are hardwired) appear on top of the rotor. This is a seemingly arbitrary character for each rotor, and it stems from the fact that rotor stepping was possible due to physical turnover notches on each rotor.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;rotor stepping&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
// Rotate the outermost rotor.
rotors.get(0).rotate();
// Check if any of the other rotors are also rotated.
if(rotors.get(0).getRotor() == 1 &amp;amp;&amp;amp; rotors.get(0).getTop() == &amp;#39;R&amp;#39;
    || rotors.get(0).getRotor() == 2 &amp;amp;&amp;amp; rotors.get(0).getTop() == &amp;#39;F&amp;#39;
    || rotors.get(0).getRotor() == 3 &amp;amp;&amp;amp; rotors.get(0).getTop() == &amp;#39;W&amp;#39;) {
        rotors.get(1).rotate();
} 
// same process for the other rotor
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;The only additional thing to say about rotors is that, although we perform this stepping on left-to-right encrypt, the rotors remain stationary when the electrical current passes back through the rotors on its way back to the keyboard display. So right-to-left encryption is straight-forward:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;rotor left-to-right encryption&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
// There is no rotation in left-to-right rotor encryption.
for(int i = rotors.size() - 1; i &amp;gt;= 0; i--) {
    current = rotors.get(i).translate(current);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h3 id=&#34;reflector&#34;&gt;Reflector&lt;/h3&gt;
&lt;p&gt;There is one final component of the Enigma that I haven&amp;rsquo;t talked about yet. On the far left of the machine, past the final rotor, there is a reflector. This reflector takes the output of the final rotor and alters it before returning the current back through all of the rotors again. I thought of the reflector as just being a stationary rotor. For this project, I used the wire specification used by the &lt;strong&gt;UKW-B&lt;/strong&gt; reflector, which was in-use for most of World War II. It uses the wire specification &lt;code&gt;YRUHQSLDPXNGOKMIEBFZCWVJAT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, to encrypt a character, the driver function of my simulator executes the following steps:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;java&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;top-level encryption&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-java&#34; &gt;&lt;code&gt;
int alphaIndex = ALPHABET.indexOf(c);
int afterPb = pb.translate(alphaIndex);
int afterRotors = rotorEncrypt(afterPb, rotors);
int afterReflector = reflector.translate(afterRotors);
int afterReverseRotors = reverseRotorEncrypt(afterReflector, rotors);
int afterReversePb = pb.reverseTranslate(afterReverseRotors);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h3 id=&#34;interface&#34;&gt;Interface&lt;/h3&gt;
&lt;p&gt;To actually run the Enigma simulator, the user must provide a &amp;lsquo;day key&amp;rsquo;, just as the original Enigma machine required. The day key describes the machine&amp;rsquo;s plugboard configuration, rotor order, and rotor offset. The neat thing about the day key of the Enigma was that it allowed for &lt;strong&gt;symmetrical&lt;/strong&gt; encipherment. That is to say, if my machine is set to a certain configuration, and your machine is set to a certain configuration, you can type in my encrypted text to retrieve the decrypted message. The day key comprises the settings of the machine, but also the key to decryption. In the end, irresponsible usage of these day keys resulted in &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma#Rejewski&#39;s_characteristics_method&#34;&gt;the downfall of the Enigma&amp;rsquo;s &amp;ldquo;unbreakable&amp;rdquo; cipher&lt;/a&gt;. (When I first read about day keys, I was amused &amp;ndash; it&amp;rsquo;s just like a config map!)&lt;/p&gt;
&lt;p&gt;Regarding the user interface, let it be known that I have an irrational infatuation with command-line interfaces. I tend to create things either to satisfy my own intellectual curiosity or to improve my own personal workflows, so I&amp;rsquo;m trying to get better about prioritizing &amp;lsquo;user experience&amp;rsquo; in the abstract. For this project however, I was in a real &amp;lsquo;text-based&amp;rsquo; phase. The interface for this simulation is basically just a series of print statements that I scatter at various points of the code, which made is easier for me to see how the machine was &amp;lsquo;working&amp;rsquo; at every step of the encryption process. The print statements were also more &amp;ldquo;narrative-based&amp;rdquo;, which was partially because I was fixated on &lt;a href=&#34;https://www.blaseball.com/landing&#34;&gt;Blaseball&lt;/a&gt; at the time (I&amp;rsquo;ll have to write about some of the Blaseball projects that I completed, at some point!).&lt;/p&gt;
&lt;p&gt;Here is what the user sees when they try to encrypt the text &lt;code&gt;HI&lt;/code&gt; with the following day key:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(A,I) (J,F) (E,M) (Z,X) (W,O) (S,B)
2 3 1
K W O
&lt;/code&gt;&lt;/pre&gt;
  &lt;img src=&#34;/projects/enigma/cli.png&#34;  alt=&#34;Enigma CLI&#34;  class=&#34;center&#34;  style=&#34;border-radius: 8px;&#34;  /&gt;


&lt;p&gt;(Rotor 0 is what I call the reflector in this version of the project.)&lt;/p&gt;
&lt;h2 id=&#34;post-mortem&#34;&gt;Post-Mortem&lt;/h2&gt;
&lt;p&gt;I enjoyed working on this project, and it was great fun to implement a simulation while extrapolating requirements from history. That being said, there are a few things that I would do tweak if I opted to pour any additonal time into this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Testing.&lt;/strong&gt; 😅 I&amp;rsquo;m not really sure that what I have works! There are a few different Enigma simulators out there, and I found that when I used the same configuration with the same input text, it would return a different output than my simulator. Writing some tests, while tedious and complicated, would improve the functionality of this simulator.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring.&lt;/strong&gt; Even writing this blog post, I&amp;rsquo;m annoyed by some of the opportunities for refactoring that I can see throughout my code. The most glaring opportunity is to remove the concept of a &lt;code&gt;translate()&lt;/code&gt; and &lt;code&gt;reverseTranslate()&lt;/code&gt; method, and replace them with a single &lt;code&gt;translate()&lt;/code&gt; method that takes n &lt;code&gt;isReverse&lt;/code&gt; boolean.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extending.&lt;/strong&gt; There are a lot of fun things that could be thrown into the simulator to extend its functionality. I can add more rotor wire specifications, or allow users to input their own. I can add support for a fourth rotor, which &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma#M4_(German_Navy_4-rotor_Enigma)&#34;&gt;the German navy actually started using&lt;/a&gt; during the tail-end of the Enigma&amp;rsquo;s dominance. The simple design of the Enigma allows for a lot of creative modificaftions, and it would be fun to extend my program to use this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To check out the GitHub repo for this project, &lt;a href=&#34;https://github.com/gibbyfree/enigma&#34;&gt;click this link!&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Test Engineering at Carbonite</title>
      <link>/experience/carbonite/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/experience/carbonite/</guid>
      <description>Carbonite is a software company that provides data backup solutions to individuals and businesses. They have a few product offerings, including Carbonite Endpoint. Endpoint is an endpoint protection software that large, distributed organizations can deploy to protect, backup, and manage the data that exists on that organization&amp;rsquo;s devices. Endpoint offers features such as advanced administrative control, incremental restore, and most importantly, highly secure protection. Here&amp;rsquo;s what I have on my resume to represent my time at Carbonite:</description>
      <content>&lt;p&gt;Carbonite is a software company that provides data backup solutions to individuals and businesses. They have a few product offerings, including Carbonite Endpoint. Endpoint is an endpoint protection software that  large, distributed organizations can deploy to protect, backup, and manage the data that exists on that organization&amp;rsquo;s devices. Endpoint offers features such as advanced administrative control, incremental restore, and most importantly, highly secure protection. Here&amp;rsquo;s what I have on my resume to represent my time at Carbonite:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributed to the design and development of the Carbonite Endpoint web-based admin control portal in an Agile Scrum team, primarily focused on API development&lt;/li&gt;
&lt;li&gt;Designed and implemented automated testing using Python&lt;/li&gt;
&lt;li&gt;Documented and resolved defects related to the API (C#) and UI (Angular)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;When I worked at Carbonite, I was helping the Endpoint team expand the functionality of their admin control portal. This is the portal that system admins or IT professionals would use to manage users, devices, and backups that were registered under their organization. From my understanding, the portal was making use of an API that my team was responsible for creating &lt;code&gt;v2&lt;/code&gt; of &amp;ndash; at least for certain, frequently-used endpoints. There was a surprising amount of complexity to these endpoints, as they had to account for complex organizations of users and role-based access control.&lt;/p&gt;
&lt;p&gt;The Endpoint team followed a test-driven development process. I was a Software Engineer in Test on the team, which meant that I worked directly alongside an engineer as they developed. I defined test cases based on the requirements of the ticket, and I wrote automated tests in Python to ensure that the developer&amp;rsquo;s work was correct and well-implemented. If I recall correctly, we used a homegrown testing library similar to Pytest. My team also greatly prioritized accurate documentation and comments, so there was some time spent refining Swagger documentation as well.&lt;/p&gt;
&lt;p&gt;This role also allowed for my first experience with Selenium, as it was sometimes necessary to check that certain conditions and outputs were conveyed accurately in the UI. This was my first time using a browser automation tool, and I thought that it was pure black magic! I would still like to find an opportunity to create something neat with Selenium. Overall, my time spent at Carbonite allowed me to use interesting tools and improve my discipline around automated and integrated tests.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/homepage/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/homepage/about/</guid>
      <description>Greetings! My name is Gibby [gɪb.i:] and I&amp;rsquo;m a Software Engineer at Microsoft. I am most invigorated by programming languages, compilers, and systems programming. I&amp;rsquo;m currently based in Seattle.
Outside of computing, I also enjoy spoken languages, small keyboards, cooking, narrative nonfiction, puzzles, the great outdoors, and just about anything else that sets off electrical impulses in my brain. Here, I write about many of those things.
Connect with me via: GitHub ∨ LinkedIn ∨ Email</description>
      <content>&lt;p&gt;&lt;strong&gt;Greetings!&lt;/strong&gt; My name is Gibby [gɪb.i:] and I&amp;rsquo;m a Software Engineer at Microsoft. I am most invigorated by programming languages, compilers, and systems programming. I&amp;rsquo;m currently based in Seattle.&lt;/p&gt;
&lt;p&gt;Outside of computing, I also enjoy spoken languages, small keyboards, cooking, narrative nonfiction, puzzles, the great outdoors, and just about anything else that sets off electrical impulses in my brain. Here, I write about many of those things.&lt;/p&gt;
&lt;p&gt;Connect with me via: &lt;a href=&#34;https://github.com/gibbyfree&#34;&gt;GitHub&lt;/a&gt; ∨ &lt;a href=&#34;https://www.linkedin.com/in/gibbyfree/&#34;&gt;LinkedIn&lt;/a&gt; ∨ &lt;a href=&#34;mailto:gib@gibby.dev&#34;&gt;Email&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Skills</title>
      <link>/homepage/skills/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/homepage/skills/</guid>
      <description>   Proficient (⭐⭐⭐) Familiar (⭐⭐)            </description>
      <content>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Proficient (⭐⭐⭐)&lt;/th&gt;
&lt;th&gt;Familiar (⭐⭐)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
  &lt;img src=&#34;/icon/java.svg&#34;  alt=&#34;Java&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/python.svg&#34;  alt=&#34;Python&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/typescript.svg&#34;  alt=&#34;Typescript&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/vuedotjs.svg&#34;  alt=&#34;Vue.js&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/git.svg&#34;  alt=&#34;Git&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/postgresql.svg&#34;  alt=&#34;PostgreSQL&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/docker.svg&#34;  alt=&#34;Docker&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;

&lt;/td&gt;
&lt;td&gt;
  &lt;img src=&#34;/icon/csharp.svg&#34;  alt=&#34;C&amp;#43;&amp;#43;&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/cplusplus.svg&#34;  alt=&#34;C&amp;#43;&amp;#43;&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/react.svg&#34;  alt=&#34;React.js&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/go.svg&#34;  alt=&#34;Golang&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/rust.svg&#34;  alt=&#34;Rust&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/r.svg&#34;  alt=&#34;R&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/terraform.svg&#34;  alt=&#34;Terraform&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;


  &lt;img src=&#34;/icon/rubyonrails.svg&#34;  alt=&#34;Rails&#34;  class=&#34;left&#34;  style=&#34;max-height: 10%; max-width: 10%; filter: invert(100%) sepia(23%) saturate(1511%) hue-rotate(222deg) brightness(103%) contrast(110%);&#34;  /&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    </item>
    
  </channel>
</rss>
